共享内存的相关操作主要包括：
  shmget(  )  创建一个新的共享内存区段 
              取得一个共享内存区段的描述符 
  shmctl(  )  取得一个共享内存区段的信息 
              为一个共享内存区段设置特定的信息 
              移除一个共享内存区段 
  shmat(  )   挂接一个共享内存区段 
  shmdt(  )   于一个共享内存区段的分离 

共享内存没有提供同步的机制，这使得我们在使用共享内存进行进程间通信时，往往要借助其他的手段来进行进程间的同步工作。
这里，通过对共享内存保存的结构体
struct shared_use_st
{
	int written;//作为一个标志，非0：表示可读，0表示可写
	char text[TEXT_SZ];//记录写入和读取的文本
};
中的written标志，来标志，其是否可以用于读写。
通过在程序中判断written的值，来保持共享内存在 两个进程之间的读写的状态。


