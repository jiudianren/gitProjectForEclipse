标签（空格分隔）： 未分类

c/c++ __thread
https://blog.csdn.net/simsunny22/article/details/82597859

inline 

likely()与unlikely()函数的意义
https://www.cnblogs.com/xudong-bupt/p/7337240.html

https://www.cnblogs.com/embedded-linux/p/5943652.html

和普通的是一样的，只不过是提高了cache的命中率
问题如果没有cache呢 ？如何确定计算机有没有cache？？



C语言中的volatile——让我保持原样
https://www.cnblogs.com/yangguang-it/p/6719261.html?utm_source=itdadao&utm_medium=referral


#  typedef和define，const，struct和typedef struct
https://blog.csdn.net/chenyang19870806/article/details/53127565


# 自旋锁和互斥锁


https://www.cnblogs.com/biyeymyhjob/archive/2012/07/21/2602015.html


自旋锁适用情况

自旋锁比较适用于锁使用者保持锁时间比较短的情况。正是由于自旋锁使用者一般保持锁时间非常短，因此选择自旋而不是睡眠是非常必要的，自旋锁的效率远高于互斥锁。信号量和读写信号量适合于保持时间较长的情况，它们会导致调用者睡眠，因此只能在进程上下文使用，而自旋锁适合于保持时间非常短的情况，它可以在任何上下文使用。如果被保护的共享资源只在进程上下文访问，使用信号量保护该共享资源非常合适，如果对共享资源的访问时间非常短，自旋锁也可以。但是如果被保护的共享资源需要在中断上下文访问（包括底半部即中断处理句柄和顶半部即软中断），就必须使用自旋锁。自旋锁保持期间是抢占失效的，而信号量和读写信号量保持期间是可以被抢占的。自旋锁只有在内核可抢占或SMP（多处理器）的情况下才真正需要，在单CPU且不可抢占的内核下，自旋锁的所有操作都是空操作。另外格外注意一点：自旋锁不能递归使用。

 # 包括底半部即中断处理句柄和顶半部即软中断
 底半部中断
 顶半部中断
 
 https://blog.csdn.net/u012590688/article/details/46124647
